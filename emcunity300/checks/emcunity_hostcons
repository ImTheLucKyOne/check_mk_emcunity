#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# License: GNU General Public License v2

# Written/Edited by Philipp NÃ¤ther
# philipp.naether@stadt-meissen.de
# andreas.doehler@gmail.com

# 1:    ID              = Host_4
#       Name            = 192.168.5.151
#       Description     =
#       Tenant          =
#       Type            = host
#       Address         = 192.168.5.151,169.254.199.59
#       Netmask         =
#       OS type         = VMware ESXi 6.0.0
#       Ignored address =
#       Management type = VMware
#       Accessible LUNs = sv_1
#       Health state    = OK (5)
#       Health details  = "The component is operating normally. No action is required."

def inventory_emcunity_hostcons(info):
    item = "Host Connections"
    yield item, None


def check_emcunity_hostcons(item, params, info):
    if not info:
        return
    keys = [ "Name", "OS type", "Health state", "Health details" ]
    cons = emcunity_parse_info(info, keys)
    multi = []
    states = []
    for con in cons:
        name = cons[con]["Name"]
        os = cons[con]["OS type"]
        hstate = cons[con]["Health state"]
        states.append(hstate)
        hdetail = cons[con]["Health details"]
        multi.append("%s, %s, %s ,%s" % (name, os, hstate, hdetail))
    infotext = "%s active connections, overall state: %s, check long output for details" % \
    (len(cons), max(states))
    infotext += "\n" + "\n".join(multi)
    return parse_emcstate(max(states)), infotext


check_info["emcunity_hostcons"] = {
    'check_function'         :    check_emcunity_hostcons,
    'inventory_function'     :    inventory_emcunity_hostcons,
    'service_description'    :    '%s',
    'includes'               :    [ 'emcunity.include' ],
}
