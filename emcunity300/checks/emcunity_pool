#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# License: GNU General Public License v2

# Written/Edited by Philipp NÃ¤ther
# philipp.naether@stadt-meissen.de
# andreas.doehler@gmail.com

# 1:    ID                                                = pool_1
      # Name                                              = VMWare
      # Description                                       =
      # Total space                                       = 4263023476736 (3.8T)
      # Current allocation                                = 723433553920 (673.7G)
      # Remaining space                                   = 3539589922816 (3.2T)
      # Subscription                                      = 2244657283072 (2.0T)
      # Subscription percent                              = 52%
      # Alert threshold                                   = 70%
      # Drives                                            = 5 x 1.2T SAS
      # Number of drives                                  = 5
      # RAID level                                        = 5
      # Stripe length                                     = 5
      # Rebalancing                                       = no
      # Rebalancing progress                              =
      # Health state                                      = OK (5)
      # Health details                                    = "The component is operating normally. No action is required."
      # FAST Cache enabled                                = yes
      # Protection size used                              = 0
      # Auto-delete state                                 = Idle
      # Auto-delete paused                                = no
      # Auto-delete pool full threshold enabled           = yes
      # Auto-delete pool full high water mark             = 95%
      # Auto-delete pool full low water mark              = 85%
      # Auto-delete snapshot space used threshold enabled = no
      # Auto-delete snapshot space used high water mark   = 25%
      # Auto-delete snapshot space used low water mark    = 20%
      # Compression space saved                           = 0
      # Compression Percent                               = 0%
      # Compression Ratio                                 = 1:1
from cmk.base.check_legacy_includes.df import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.check_legacy_includes.size_trend import *  # pylint: disable=wildcard-import,unused-wildcard-import

def inventory_emcunity_pool(info):
    keys = None
    pools = emcunity_parse_info(info, keys)
    for pool in pools:
        item = pools[pool]["Name"]
        yield item, None


def check_emcunity_pool(item, params, info):
    keys = [ "Name", "Health state", "Health details", "Total space", "Current allocation", "Subscription", "Remaining space" ]
    pools = emcunity_parse_info(info, keys)
    for pool in pools:
        name = pools[pool]["Name"]
        if name == item:
            size_B = re.search("\d+", pools[pool]["Total space"].lstrip()).group(0)
            used_B = re.search("\d+", pools[pool]["Current allocation"].lstrip()).group(0)
            avail_B = re.search("\d+", pools[pool]["Remaining space"].lstrip()).group(0)
            sub_B = re.search("\d+", pools[pool]["Subscription"].lstrip()).group(0)

            used_mb = int(used_B) / 1024.0 / 1024.0
            size_mb = int(size_B) / 1024.0 / 1024.0
            avail_mb = int(avail_B) / 1024.0 / 1024.0
            sub_mb = int(sub_B) / 1024.0 / 1024.0
            sub_percent = (sub_mb / size_mb) * 100

            hstate = pools[pool]["Health state"]
            hdetail = pools[pool]["Health details"]
            if hstate != "OK_BUT (7)":
                emcstate = parse_emcstate(hstate)
            else:
                emcstate = 0 
            
            status, infotext, perfdata = df_check_filesystem_single(item, size_mb, avail_mb, 0, None, None, params)
            perfdata += [ ('subscription', str(sub_mb) + 'MB'), ]
            infotext += ", subscription: %.lf%%" % (sub_percent)
            infotext += ", EMC State: %s %s" % (hstate, hdetail)
    if emcstate > status:
        return emcstate, infotext, perfdata
    else:
        return status, infotext, perfdata


check_info["emcunity_pool"] = {
    'check_function'             :    check_emcunity_pool,
    'inventory_function'         :    inventory_emcunity_pool,
    'has_perfdata'               :    True,
    'service_description'        :    'Pool %s',
    'includes'                   :    [ 'emcunity.include' ],
    'group'                      :    "filesystem",
    'default_levels_variable'    :    "filesystem_default_levels",
}
