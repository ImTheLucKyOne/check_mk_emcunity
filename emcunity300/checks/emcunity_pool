#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Written/Edited by Philipp NÃ¤ther
# philipp.naether@stadt-meissen.de

# 1:    ID                                                = pool_1
      # Name                                              = VMWare
      # Description                                       =
      # Total space                                       = 4263023476736 (3.8T)
      # Current allocation                                = 723433553920 (673.7G)
      # Remaining space                                   = 3539589922816 (3.2T)
      # Subscription                                      = 2244657283072 (2.0T)
      # Subscription percent                              = 52%
      # Alert threshold                                   = 70%
      # Drives                                            = 5 x 1.2T SAS
      # Number of drives                                  = 5
      # RAID level                                        = 5
      # Stripe length                                     = 5
      # Rebalancing                                       = no
      # Rebalancing progress                              =
      # Health state                                      = OK (5)
      # Health details                                    = "The component is operating normally. No action is required."
      # FAST Cache enabled                                = yes
      # Protection size used                              = 0
      # Auto-delete state                                 = Idle
      # Auto-delete paused                                = no
      # Auto-delete pool full threshold enabled           = yes
      # Auto-delete pool full high water mark             = 95%
      # Auto-delete pool full low water mark              = 85%
      # Auto-delete snapshot space used threshold enabled = no
      # Auto-delete snapshot space used high water mark   = 25%
      # Auto-delete snapshot space used low water mark    = 20%
      # Compression space saved                           = 0
      # Compression Percent                               = 0%
      # Compression Ratio                                 = 1:1

def inventory_emcunity_pool(info):
# parse info, no key needed for inventory
# "Name" is automatically added
    keys = None
    pools = emcunity_parse_info(info, keys)
    for pool in pools:
        item = pools[pool]["Name"]
        yield item, None

def check_emcunity_pool(item, params, info):
# parse info, just get data we want for this check by defining the keys
    keys = [ "Name", "Health state", "Health details", "Total space", "Current allocation", "Subscription", "Remaining space" ]
    pools = emcunity_parse_info(info, keys)
    for pool in pools:
        name = pools[pool]["Name"]
        if name == item:
            # get health details
            hstate = pools[pool]["Health state"]
            hstate_num = int(re.search("\d+", hstate.lstrip()).group(0))
            if hstate_num == 0:
                status = 3 #UNKN
            elif hstate_num == 5:
                status = 0 #OK
            elif hstate_num < 20:
                status = 1 #WARN
            else:
                status = 2 #CRIT
            hdetail = pools[pool]["Health details"]
            yield status, "State: %s %s" % (hstate, hdetail)

            # get bytes from agent output
            size_B = re.search("\d+", pools[pool]["Total space"].lstrip()).group(0)
            used_B = re.search("\d+", pools[pool]["Current allocation"].lstrip()).group(0)
            avail_B = re.search("\d+", pools[pool]["Remaining space"].lstrip()).group(0)
            sub_B = re.search("\d+", pools[pool]["Subscription"].lstrip()).group(0)

            used_mb = int(used_B) / 1024.0 / 1024.0
            size_mb = int(size_B) / 1024.0 / 1024.0
            avail_mb = int(avail_B) / 1024.0 / 1024.0
            sub_mb = int(sub_B) / 1024.0 / 1024.0
            sub_percent = (sub_mb / size_mb) * 100

            # get status, infotext and perfdata
            status, infotext, perfdata = df_check_filesystem_single(item, size_mb, avail_mb, 0, None, None, params)
            perfdata += [ ('subscription', str(sub_mb) + 'MB'), ]
            infotext += ", subscription: %.lf%%" % (sub_percent)
            yield status, infotext, perfdata

check_info["emcunity_pool"] = {
    'check_function'             :    check_emcunity_pool,
    'inventory_function'         :    inventory_emcunity_pool,
    'has_perfdata'               :    True,
    'service_description'        :    'Pool %s',
    'includes'                   :    [ 'emcunity.include', 'df.include', 'size_trend.include' ],
    'group'                      :    "filesystem",
    'default_levels_variable'    :    "filesystem_default_levels",
}
