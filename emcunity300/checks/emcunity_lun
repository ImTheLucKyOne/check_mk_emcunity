#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# License: GNU General Public License v2

# Written/Edited by Philipp NÃ¤ther
# philipp.naether@stadt-meissen.de
# andreas.doehler@gmail.com

# 1:    ID                         = sv_3
      # Name                       = MAilArchiv
      # Description                =
      # Group                      =
      # Storage pool ID            = pool_2
      # Storage pool               = Archiv
      # Type
      # Base storage resource
      # Source
      # Original Parent
      # Health state               = OK (5)
      # Health details             = "The LUN is operating normally. No action is required."
      # Size                       = 4509715660800 (4.1T)
      # Maximum size               = 281474976710656 (256.0T)
      # Thin provisioning enabled  = yes
      # Compression enabled        = no
      # Compression space saved    = 0
      # Compression percent        = 0%
      # Compression ratio          = 1:1
      # Current allocation         = 30216601600 (28.1G)
      # Protection size used       = 0
      # Non-base size used
      # Family size used
      # Snapshot count             = 0
      # Family snapshot count
      # Family thin clone count
      # Protection schedule        =
      # Protection schedule paused = no
      # WWN                        = 60:06:01:60:95:C0:42:00:C2:E1:2F:59:A7:DA:24:7F
      # Replication destination    = no
      # Creation time              = 2017-06-01 09:43:30
      # Last modified time         = 2017-06-01 10:21:18
      # SP owner                   = SPA
      # Trespassed                 = no
      # FAST VP policy             = Start high then auto-tier
      # FAST VP distribution       = Extreme Performance: 0%, Performance: 100%, Capacity: 0%
      # LUN access hosts           = Host_7
      # Snapshots access hosts     =
      # IO limit                   =
      # Effective maximum IOPS     = N/A
      # Effective maximum KBPS     = N/A
from cmk.base.check_legacy_includes.df import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.check_legacy_includes.size_trend import *  # pylint: disable=wildcard-import,unused-wildcard-import

def inventory_emcunity_lun(info):
    keys = None
    luns = emcunity_parse_info(info, keys)
    for lun in luns:
        item = luns[lun]["Name"]
        yield item, None


def check_emcunity_lun(item, params, info):
    keys = [ "Name", "Health state", "Health details", "Size", "Current allocation" ]
    luns = emcunity_parse_info(info, keys)
    for lun in luns:
        name = luns[lun]["Name"]
        if name == item:
            size_B = re.search("\d+", luns[lun]["Size"].lstrip()).group(0)
            used_B = re.search("\d+", luns[lun]["Current allocation"].lstrip()).group(0)
            used_mb = int(used_B) / 1024.0 / 1024.0
            size_mb = int(size_B) / 1024.0 / 1024.0
            avail_mb = size_mb - used_mb
            hstate = luns[lun]["Health state"]
            hdetail = luns[lun]["Health details"]
            if hstate != "OK_BUT (7)":
                emcstate = parse_emcstate(hstate)
            else:
                emcstate = 0
            status, infotext, perfdata = df_check_filesystem_single(item, size_mb, avail_mb, 0, None, None, params)
            infotext += ", EMC State: %s %s" % (hstate, hdetail)
    if emcstate > status:
        return emcstate, infotext, perfdata
    else:
        return status, infotext, perfdata


check_info["emcunity_lun"] = {
    'check_function'             :    check_emcunity_lun,
    'inventory_function'         :    inventory_emcunity_lun,
    'has_perfdata'               :    True,
    'service_description'        :    'LUN %s',
    'includes'                   :    [ 'emcunity.include' ],
    'group'                      :    "filesystem",
    'default_levels_variable'    :    "filesystem_default_levels",
}
