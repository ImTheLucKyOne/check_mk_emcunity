#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# License: GNU General Public License v2

# Written/Edited by Philipp NÃ¤ther
# philipp.naether@stadt-meissen.de
# andreas.doehler@gmail.com

# 1:    ID             = dpe_fan_b2
      # DPE            = dpe
      # Enclosure      = dpe
      # Slot           = 2
      # Name           = DPE Cooling Module B2
      # Health state   = OK (5)
      # Health details = "The component is operating normally. No action is required."
      # Manufacturer   =
      # Model          =
      # Part number    = 100-542-054-05
      # Serial number  =

# 2:    ID             = dpe_fan_b0
      # DPE            = dpe
      # Enclosure      = dpe
      # Slot           = 0
      # Name           = DPE Cooling Module B0
      # Health state   = OK (5)
      # Health details = "The component is operating normally. No action is required."
      # Manufacturer   =
      # Model          =
      # Part number    = 100-542-054-05
      # Serial number  =

def inventory_emcunity_fan(info):
    keys = None
    fans = emcunity_parse_info(info, keys)
    for fan in fans:
        tokens = re.split(" ", fans[fan]["Name"])
        item = "FAN " + tokens[3]
        yield item, None


def check_emcunity_fan(item, params, info):
    keys = [ "Name", "Health state", "Health details" ]
    fans = emcunity_parse_info(info, keys)
    for fan in fans:
        tokens = re.split(" ", fans[fan]["Name"])
        name = "FAN " + tokens[3]
        if name == item:
            hstate = fans[fan]["Health state"]
            hdetail = fans[fan]["Health details"]
    return parse_emcstate(hstate), "%s, %s" % (hstate, hdetail)


check_info["emcunity_fan"] = {
    'check_function'         :    check_emcunity_fan,
    'inventory_function'     :    inventory_emcunity_fan,
    'service_description'    :    'HW %s',
    'includes'               :    [ 'emcunity.include' ],
}
